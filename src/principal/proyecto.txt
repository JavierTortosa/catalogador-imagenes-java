
	el github es: https://github.com/JavierTortosa/catalogador-imagenes-java.git
	
	este es un proyecto de un visualilzador/catalogador en java/swing. 
	
	Idea general:
	Soy aprendiz de programador y me dedico bastante a menudo a hacer proyectos en 3d. 
	
	Este proyecto nace de la ncesidad de buscar entre cerca de 26000 imagenes.
	Cada una de estas imagenes corresponde a un archivo comprimido que es quien contiene los modelos a imprimir
	
	Los archivos estan separados por carpetas tematicas, las cuales pueden contener varios temas diferentes y de varias formas diferentes
	Para aclararnos, las carpetas pueden ser de cine, herramientes, escenografia, etc., y dentro de cada carpeta puede contener mas carpetas refinando el catalogo de archivos
	El problema es que puede ser por una tematica, cine, o puede ser por un diseñador, punga, o simplemente ser archivos stl con su imagen
	las carpetas tematicas no tienen demasiado problema, pero las de diseñadores pueden contener varios temas, ademas las imagenes pueden ser de 1 modelo o varios
	
	Los proyectos en 3d suelen ser tematicos por ej trofeos para toneo de blood bowl. para este proyecto necesitare buscar: bases, pedestales, una base superior y un modelo que represente el campeon por ej...
	Todo lo referente a trofeos esta en la carpeta trofeos, dentro hay otras carpetas de bases, pedestales, etc... 
	Luego tengo que ir buscando la figura que ira encima del toreo en funcion de la tematica del torneo, pongamos skaven. 
	El kit de la cuestion es buscar entre las 26000 imagenes, algun modelo que sea de la tematica que busco y que me sirva para el trofeo... 
	
	Lo que pretendo con este proyecto es poder agilizar dicha busqueda.


El programa:

El programa tiene 3 partes:
	Visualizador
	Gestor de proyectos
	catalogador de imagenes
	
Este es el orden en el que pretendo abordar el proyecto, ya que primero necesito un programa agil y rapido que me permita visualizar las imagenes rapidamente
En este punto tenemos varias herramientas:


-- El Visualizador --

	La interfaz:
		En la parte superior tiene un menu con la totalidad de opciones disponibles en el programa y una opcion de configuracion que en un futuro sera mucho mas completa
		A continuacion la barra de botones, que iran distribuidos en varias barras de herramientas y que segun donde estemos se mostraran unas herramientas u otras
			(no tiene ningun sentido que se visualicen los botones de movimiento en el carrousel si estamos editando una imagen) 
		En el centro de la aplicacion tenemos 3 partes:
			1. la lista de nombres de archivos (por si sabemos el nobmre de lo que buscamos y ordenacion de los archivos (nombre, carpeta, fecha...)
			2. la lista de miniaturas es la misma lista de nombres pero mostrando una pequeña lista de imagenes para navegacion rapida 
			3. vista de la imagen seleccionada. es la vista principal de la imagen seleccionada
		
	Formas de visualizar la interfaz 
		
		1. Navegador por carpetas, un selector de carpetas donde empezar la visualizacion de las imagenes
		2. Una opcion para que Se puede visualizar la carpeta actual o con las subcarpetas. muy util por la distribucion de las carpetas que tenemos
		3. Zoom. Hay 2 tipos:
			1. Zoom Manual que me permite acercar o alejar la imagen o moverla (muy practico en las imgaenes multiples)
			2. Tipos de zoom: son varias formas de ver las imagenes (sin restriccciones, ajutas al espacion maximo, ajustar al alto/ancho....)
				Este segundo tipo tiene una opcion para mantener o no las proporciones de la imagen
		2. Modos de visualizacion: 1 imagen, grid de imagenes, etc....
		3. Complemento al Modo de visualizacion: pantalla compeleta y carrousel
		4. Tanto el menu, como las diferentes listas, botones, etc se pueden hacer visibles o no... para ganar espacio de visualizacion
	
	Edicion
	
		1. la funciones basicas, rotar izq. y der., espejo horizonta y vertical
		2. Un modo de recortar (para las imagenes multiples) pero que sera capaz de de poder modificar la imagen actual 
			(tendra una serie de opciones para pegar el recorte en la imagen original, separar el recorte de la imagen original....)
		3. Varias formas de guardado tanto de la imagen nueva como la original como la modificacion.... 
		

-- Gestor de Proyectos --
					
	Se distribuye en varias fases: 
		1. una opcion de marcar las imagenes que nos interesa y añadir el archivo con su ruta en un txt temporal 
		2. Un visualizador de las imagenes marcadas (cambiando el foco entre las carpetas del disco o el contenido del txt)
		3. El archivo temporal se puede guardar con un nombre concreto y se pueden gestionar los diferentes proyectos
		
		
-- Catalogador de Imagenes --

	Es el grueso de la aplicacion, gestionando una base de datos o metadatos o algo similar en donde poder catalogar las imagenes, de tal forma que pueda buscar elfos, enanos, etc.
	Con la base de datos podremos implementar un gestor de proyectos que pueda ser mas refinado, el uso de tags, pero el trabajo de introducir los de 26000 imagenes puede ser duro.
	La complicacion mas grande de catalogar las imagenes es el tema de que la cantidad de archivos que tengo ahora y que va creciendo y por lo tanto se van refinando las carpetas
		(una carpeta que empezo siendo cine, ahora tiene star wars, señor de los anillos.... y dentro de star wars esta la carpeta de naves, personajes, droides... y asi hasta el infinito....

		 
--- MegaConfig - El Centro de Control del Usuario:

	Objetivo: Proporcionar una interfaz gráfica centralizada donde el usuario pueda ajustar finamente casi todos los aspectos del comportamiento y la apariencia de la aplicación, sin necesidad de editar manualmente el archivo config.cfg (aunque este seguirá siendo la base para la persistencia).

	Contenido Potencial (basado en lo que ya tienes y planeas):
		Visibilidad de Componentes de UI:
		Checkboxes para mostrar/ocultar la barra de menú, la barra de herramientas principal, la lista de archivos, la barra de miniaturas, las barras de información (superior e inferior) y los elementos individuales dentro de estas barras.
		Gestión de la visibilidad de botones individuales en la barra de herramientas (lo que ya tienes en el menú "Configuración -> Visualizar Botones" podría migrar o complementarse aquí).

	Configuración de Paneles y Layout:
		(Más avanzado) Opciones para cambiar la disposición de los paneles principales si decides ofrecer diferentes layouts.
		Configuración de la posición por defecto del divisor del JSplitPane.

	Comportamiento de la Aplicación:
		Opciones de "Carga de Imágenes" (subcarpetas, ordenación por defecto).
		Opciones de "Comportamiento General" (imagen de bienvenida, abrir última imagen, navegación circular, etc.).
		Configuración de la cantidad de miniaturas (antes/después), tamaño de miniaturas.
		Parámetros de zoom por defecto.

	Apariencia y Temas:
		Selector de temas (lo que ya tienes en el menú, pero podría tener una vista previa aquí).
		(Muy avanzado) Editor de temas o personalización de colores individuales si quisieras ir por ese camino, aunque gestionar un tema completo es más sencillo.
		Configuración de Teclado (Atajos):
		(Avanzado) Permitir al usuario personalizar algunos atajos de teclado.
		Configuración de la Base de Datos/Catalogador (Futuro):
		Ruta de la base de datos, opciones de indexación, etc.
		Botones de Acción: "Aplicar", "Cancelar", "Restaurar Defaults".
		
	--- Diseño de la UI
	
		La interfaz esta diseñada sobre un cardLayout que proporciona que cada modo tenga su interfaz como si fueran las paginas de un libro
		Sobre esta pagina estan establecidos unos paneles vacios para que en el futuro config podamos asignar el componente final al panel que queramos
		La barra de botones esta compuesta por varias toolbars independientes para poder ver la toolbar pertinente segun lo que estemos haciendo
		
	--- Diseño de las Listas
		
		Dado el gran volumen de imagnes, necesitamos formas de ver la mayor cantidad de imagnes en el menor tiempo posible y para eso tenemos las 2 listas, una de nombres y otra de miniaturas
		La lista de nombres contiene la lista completa de nombres que estamos viendo pero la lista de miniaturas solo esta mostrando una cantidad concreta en cada momento porque hacer 26000 miniaturas es una locura
		Como la lista de nombres y la de miniaturas funcionan de forma diferente, la lista de miniaturas se crea de forma manual, creando una miniatura y añadiendola a la barra de miniaturas
		Cuando nos movemos por esta lista de miniaturas, lo que estamos haciendo es eliminar la miniatura que ya no se ve y añadiendo una nueva (al principio o al final segun convenga)
		Para sincronizar las 2 listas, lo que tenemos es una lista principal que es la que realmente tiene la informacion del disco y la deriva a las 2 listas (miniaturas y nombres) y con un metodo lo sincronizamos todo
		Ademas para ayudarnos al desplazamiento de las miniaturas, usamos un scrollPane que nos da los medios para el desplazamiento, pero no contiene las miniaturas, sino el panel que creamos nosotros
		Tambien se creo un cache para que algunas de las miniaturas se fabriquen mientras estamos viendo las que estan en pantalla y asi agilizamos la barra de miniaturas
		En una version mas avanzada, se añadio que las miniaturas visibles fuera variable, de manera que se vean el maximo de miniaturas posible segun el ancho de la aplicacion
	
--------------------------------   		 
   		
Modos de trabajo

	Visualizador de imagenes
	Gestor de proyectos
	Catalogador de imagenes
	Carrousel
	Edicion
	
	   		 
--------------------------------


| Modo de Zoom                | BMP false (Modo Normal / "Confía en mí")                                                            | BMP true (Modo Seguro / "Ayúdame a verla")                                                    |
|-----------------------------|-----------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|
| Ajustar a Pantalla          | Muestra la imagen entera, sin salirse. (BMP es irrelevante)                                         | Muestra la imagen entera, sin salirse. (BMP es irrelevante)                                   |
| Ajustar a Ancho             | La imagen se escala para ocupar el 100% del ancho del panel, manteniendo su proporción.             | Si al ajustar al ancho se sale por alto, se re-escala para que quepa entera (aplica Ajustar a Pantalla). |
|                             | Puede salirse por alto.                                                                             |
| Ajustar a Alto              | La imagen se escala para ocupar el 100% del alto del panel, manteniendo su proporción.              | Si al ajustar al alto se sale por ancho, se re-escala para que quepa entera (aplica Ajustar a Pantalla).  |
|                             | Puede salirse por ancho.                                                                            |
| Zoom 100% (Tamaño Real)     | La imagen se muestra a su tamaño real (1:1). Puede salirse.                                         | Si al 100% se sale de la pantalla, se re-escala para que quepa entera (aplica Ajustar a Pantalla).  |
| Zoom Fijo (Mantener Actual) | Usa el zoomFactor guardado. Ignora los límites del panel.                                           | Usa el zoomFactor guardado. Ignora los límites del panel.                                     |
| Zoom Específico             | Usa el % guardado. Ignora los límites del panel.                                                    | Usa el % guardado. Ignora los límites del panel.                                              |
| Rellenar                    | (ÚNICO CASO DE DEFORMACIÓN) Estira para ocupar el 100% del panel.                                   | Igual que en modo normal. (BMP es irrelevante)                                                |   		 
   		 
   		 
--------------------------------

pongamos un ejemplo de caso real....
pongamos que estoy buscando imagenes para un proyecto, y encuentro una imagen como la que es estrecha y alta. ese tipo de imagenes se que corresponde a un distribuidor en concreto, pulso el boton de mostrar solo carpeta de la imagen actual, y activo el modo de zoom ajustar a lo ancho.... pero la imagen es muy grande, asi que la reduzco para verla un poco mejor a pesar de que sobresale por arriba y por abajo. las imagenes de ese distribuidor estan en una misma carpeta, por lo que se que mostrando la carpeta actual voy a ver muchas imagenes con este mismo estilo y que es muy probable que el zoom que acabo de ajustar con la rueda del raton y el modo ajustar al ancho me serviran para las siguientes imagenes... entonces aplico el zoom fijo. a partir de ahora tolas las mage3nes que vea seran con ese zoom, pero de repente me encuentro una imagen que no corresponde con el formato, asi que paso a zoom especificado, manteniendo el % de las imagenes que he estado viendo hasta ahora y puede acercar o alejar la imagen sin cambios en el %z. en cuanto pase a la siguiente se volvera a aplicar el zoom que tenemoe en el popup....

--------------------------------

pongamos otro uso real para que veas como funcionan los modos como si todo funcionase y todo estuviera terminado....
me piden que haga 6 trofeos para un torneo de blood bowl. el torneo es la Parabellum Cup, en honor a un bar que empezo con esto de los torneos y su logo eran unos skaven jugando... por lo tanto el tema principal es Skavens...

vale. abrimos el programa y nos enfrentamos a 26000 imagenes. con la ayuda de la base de datos del modo Datos, tenemos las imagenes con unas etiquetas (TAGS)
vale. como el tema es skaven, aplicamos un filtro positivo en "SKAVEN", de las 26000 ya solo se nos muestran 5000....
ahora aplicamos otro filtro "BIG GUY" para que nos enseñe las ratas mas gordas y lustrosas para nuestros trofeos, ahora se muestran 2000. porque solo se muestran de las 26000 imagenes las que son skaven y big guy
vamos mirando imagen por imagen y vamos marcando las que nos pueden interesar.... total seleccionamos 20, por ej.
vamos al modo proyecto, y empezamos a mirar las imagenes que hemos seleccionado, y empezamos a ver algunas seleccionadas que no nos convencen, las marcamos para desechar (que sera otra lista que es previa al borrado de estas marcas)
necesitamos en total 6, pero de las 20 que hemos seleccionado solo nos han convencido 4. entonces volvemos al modo visualizador
ahora aplicamos un filtro negativo "BIG GUY" ahora no queremos que se muestren los big guys,
ahora nos vamos a la carpeta de "juegos de mese/bloodBowl" vemos que las imagenes de skaven ya las habiamos visto y no nos han convencido, pues aplicamos otro filtro negativo de "SKAVEN" ahora solo se muestran las imagenes de la carpeta "Juegos de mesa/blooBowl" que no son ni skaven ni big guy.... ves por donde voy
encontramos una imagen que se llama "motosierra ratuna" esta no estaba con los skaven ni con los big guy por eso no la habiamos visto y ahora si la vemos....
como esta encontramos unas cuantas mas.... vamos al modo proyecto donde aun conservamos las candidatas que nos han convencido y las que no y ademas tambien estan las nuevas imagenes.... en este mismo momento todas las imagenes que estoy viendo son del mismo tema, skaven, pero unas tienen el tag y otras no.... pues pulso mi opcion de añadir tag en bloque y todas las que yo quiera tendran el nuevo tag "SKAVEN"....
una vez que he conseguido mis 6 imagenes puedo pulsar el boton de "busqueda y rescate" para que el programa se pasee por las 26000 imagenes y copie el archivo de imagen con el archivo comprimido que la acompaña a la carpeta que se le indique para modificar los stl, preprar los archivos de impresion, etc.....

el modo proyecto, ademas de reviar las imagenes con mas detenimiento, ya no tengo 26000 para mirar, solo tengo 40.... por lo tanto el modo zoom y el paneo son mas cruciales que en el modo visualizador.
por otro lado, el modo proyecto es una muy buena herramienta que complementa el modo datos, porque mientras estoy gestionando el proyecto actual, puedo añadir un tag comun a las imagenes que tengo marcadas "Todas estas imagenes tienen el tag " SKAVEN", y no solo eso sino que luego ademas puedo seleccionar un grupo para decir "este grupo que tengo marcado tienen el tag "CON ESPADA" por decir algo... estas otras "CON ARCO" lo que sea.... tags que me ayuden a aplicar filtros en las imagnees para no tener que buscar entre las 26000 imagenes que se dicen pronto.... (la semana que viene seguramente llegare a las 27000) que eso es otro tema que habra que abordar en su momento....
me explico?

--------------------------------

te voy a pasar la clase de inicio... desde ahi parte todo, quiero que vayas recorriendo el flujo del programa y me vayas pidiendo las clases que vayas necesitando inspeccionar....

a la hora de trabajar:
-te lo voy a decir asi, NO QUIERO, REPITO, NO QUIERO QUE ASUMAS EL FUNCIONAMIENTO DE NINGUNA CLASE NI METODO, TE PROHIBO TOTAL Y TERMINANTEMENTE QUE ASUMAS QUE UNA CLASE HACE ALGO O QUE DEBERIA CONTENER UN METODO O CUALQUIER INTENTO DE ASUMIR QUE ALGO ESTA SIN COMPROBARLO PRIMERO.... esta es la unica y mayor premisa que quiero que cumplas a rajatabla....ok?
-quiero que seas lo mas exacto posible, prefiero una respuesta clara y correcta antes que una respuesta rapida.
-quiero que me des metodos o bloques de codigo completos. no me valen lineas sueltas. los metodos tienen suficientes comentarios como para que me digas sustituye el bloque tal o por lo menos quiero que me des la linea de antes y despues del bloque de codigo que me das para modificar
- me gustaria que añadieras al final de cada metodo y cada clase añadas un comentario de fin de clase o lo que sea...

problemas y soluciones
1. primero te explico el problema y no pasamos al siguiente punto hasta que estemos de acuerdo
2. propones que puede ser y no pasamos al siguiente punto hasta que estemos de acuerdo
3. miramos como abordar el problema y no pasamos al siguiente punto hasta que estemos de acuerdo
4. empezamos a aplicar la solucion. clase a clase, metodo a metodo.... NO ME DES LOS CAMBIOS DE 20 CLASES DE GOLPE

me gustaria que al final de las clases y los metodos pusieras el comentario de fin

creo que esto es todo mi temario imperativo y me gustaria que lo siguieras lo mas filemente posible

-----------------------------------

ICONOS

https://www.streamlinehq.com/icons/core-duo-color
https://www.streamlinehq.com/icons/core-duo-color/interface-essential


-------------------------------------------------------------------------
--- PLAN DE IMPLEMENTACIÓN SELECCIÓN DE PROYECTO ---
-------------------------------------------------------------------------

== Plan Detallado para la Funcionalidad de "Selección de Imágenes para Proyecto" ==

OBJETIVO PRINCIPAL:
Permitir al usuario marcar imágenes individuales de interés dentro de un directorio
grande, guardar esta selección como un "proyecto", y poder ver/cargar estas
selecciones posteriormente. Esto es para ayudar en proyectos de impresión 3D
donde las imágenes representan los archivos STL.

TERMINOLOGÍA:
- "Selección de Proyecto" o "Imágenes Marcadas": El conjunto de imágenes que el usuario ha marcado.
- "Archivo de Proyecto": El archivo en disco (ej. .prj, .txt) que guarda una Selección de Proyecto.
- "Archivo de Selección Temporal": Un archivo por defecto donde se guardan las marcas si no se ha guardado/cargado un proyecto.

============================
ITERACIÓN 1: FUNCIONALIDAD BÁSICA (Archivo Temporal Único, Marcar/Desmarcar, Ver Lista Simple)
============================

1. ProjectSelectionManager (Clase Principal):
   - Campos:
       - `private final Path archivoSeleccionTemporal = Paths.get(System.getProperty("user.home"), ".miVisorImagenes", "seleccion_temporal.txt");`
         (Asegurar que el directorio `~/.miVisorImagenes` se cree si no existe).
       - `private Set<String> clavesMarcadasEnMemoria;` (claves relativas de imágenes).
   - Constructor:
       - Llama a `cargarDesdeArchivo(archivoSeleccionTemporal)` para poblar `clavesMarcadasEnMemoria`.
   - Métodos Privados:
       - `cargarDesdeArchivo(Path rutaArchivo)`: Lee el archivo, llena `clavesMarcadasEnMemoria`. Maneja si el archivo no existe.
       - `guardarAArchivo(Path rutaArchivo, Set<String> claves)`: Escribe el Set al archivo, una clave por línea.
   - Métodos Públicos:
       - `marcarImagen(String claveRelativa)`:
           - Añade `claveRelativa` a `clavesMarcadasEnMemoria`.
           - Llama a `guardarAArchivo(archivoSeleccionTemporal, clavesMarcadasEnMemoria)`.
       - `desmarcarImagen(String claveRelativa)`:
           - Quita `claveRelativa` de `clavesMarcadasEnMemoria`.
           - Llama a `guardarAArchivo(archivoSeleccionTemporal, clavesMarcadasEnMemoria)`.
       - `estaMarcada(String claveRelativa)`:
           - Devuelve `clavesMarcadasEnMemoria.contains(claveRelativa)`.
       - `getClavesMarcadas()`:
           - Devuelve `new ArrayList<>(clavesMarcadasEnMemoria)` (o una copia inmutable).
       - `alternarMarcaImagen(String claveRelativa)`:
           - Si `estaMarcada`, llama a `desmarcarImagen`. Sino, llama a `marcarImagen`.
           - Devuelve el nuevo estado (true si quedó marcada, false si desmarcada).

2. AppActionCommands:
   - `CMD_PROYECTO_TOGGLE_MARCA = "cmd.proyecto.toggle_marca";`
   - `CMD_PROYECTO_MOSTRAR_SELECCION_DIALOGO = "cmd.proyecto.mostrar_seleccion_dialogo";` // Para el JOptionPane inicial

3. Nuevas Actions (en controlador.actions.proyecto o similar):
   - `ToggleMarkImageAction extends BaseVisorAction`:
       - Comando: `CMD_PROYECTO_TOGGLE_MARCA`.
       - Icono: `5003-marcar_imagen_48x48.png` (o el nombre final).
       - Tooltip: "Marcar/Desmarcar imagen para el proyecto actual".
       - `actionPerformed`:
           - Obtiene `selectedImageKey` del `VisorModel`.
           - Si no es null, llama a `controller.toggleMarcaImagenActual(selectedImageKey);` (nuevo método en controller).
   - `ShowProjectSelectionDialogAction extends BaseVisorAction`:
       - Comando: `CMD_PROYECTO_MOSTRAR_SELECCION_DIALOGO`.
       - Icono: `7003-Mostrar_Favoritos_48x48.png` (o el nombre final).
       - Tooltip: "Mostrar imágenes marcadas para el proyecto actual".
       - `actionPerformed`:
           - Llama a `controller.mostrarDialogoSeleccionProyectoActual();` (nuevo método en controller).

4. VisorController:
   - Añadir campo: `private ProjectSelectionManager projectManager;` (inicializar en `AppInitializer`).
   - Inicializar `toggleMarkImageAction` y `showProjectSelectionDialogAction`. Añadirlas al `actionMap`.
   - Nuevo método: `public void toggleMarcaImagenActual(String claveImagen)`:
       - Llama a `projectManager.alternarMarcaImagen(claveImagen)` para obtener `boolean nuevoEstadoMarcada`.
       - Actualiza `toggleMarkImageAction.putValue(Action.SELECTED_KEY, nuevoEstadoMarcada);`.
       - Llama a `actualizarEstadoVisualBotonMarcarYBarraEstado(nuevoEstadoMarcada);` (nuevo método).
   - Nuevo método: `public void actualizarEstadoVisualBotonMarcarYBarraEstado(boolean estaMarcada)`:
       - Llama a `view.actualizarAspectoBotonToggle(toggleMarkImageAction, estaMarcada);`.
       - Actualiza `view.setTextoRuta()` para añadir/quitar "[MARCADA]".
   - Nuevo método: `public void mostrarDialogoSeleccionProyectoActual()`:
       - Llama a `projectManager.getClavesMarcadas()`.
       - Construye un String con estas claves.
       - Muestra el String en un `JOptionPane.showMessageDialog`.
   - En `actualizarImagenPrincipal(int indiceSeleccionado)`:
       - Después de cargar la imagen y actualizar el modelo, obtener `selectedImageKey`.
       - Llamar a `boolean marcada = projectManager.estaMarcada(selectedImageKey);`.
       - Llamar a `actualizarEstadoVisualBotonMarcarYBarraEstado(marcada);`.

5. UIDefinitionService:
   - `generateMenuStructure()`:
       - En Menú "Imagen": `new MenuItemDefinition(AppActionCommands.CMD_PROYECTO_TOGGLE_MARCA, MenuItemType.CHECKBOX_ITEM, "Marcar para Proyecto", null)`
       - En Menú "Vista" (o nuevo menú "Proyecto"): `new MenuItemDefinition(AppActionCommands.CMD_PROYECTO_MOSTRAR_SELECCION_DIALOGO, MenuItemType.ITEM, "Ver Selección de Proyecto", null)`
   - `generateToolbarStructure()`:
       - Botón "Marcar": `new ToolbarButtonDefinition(AppActionCommands.CMD_PROYECTO_TOGGLE_MARCA, "5003-marcar_imagen_48x48.png", "Marcar/Desmarcar Imagen", "control")` (o la categoría que prefieras).
       - Botón "Mostrar Selección": `new ToolbarButtonDefinition(AppActionCommands.CMD_PROYECTO_MOSTRAR_SELECCION_DIALOGO, "7003-Mostrar_Favoritos_48x48.png", "Mostrar Imágenes Marcadas", "control")` (o la categoría que prefieras).

6. VisorView (Opcional para Iteración 1, pero bueno para el futuro):
   - Si `ToggleMarkImageAction` no cambia el icono del botón directamente, `actualizarAspectoBotonToggle` podría necesitar lógica para cambiar entre icono de estrella vacía/llena.

============================
ITERACIÓN 2: GESTIÓN DE PROYECTOS CON NOMBRE (Guardar Como, Abrir, Nuevo)
============================

1. ProjectSelectionManager:
   - Campo: `private Path archivoProyectoActivo;` (puede ser null si es el temporal).
   - Modificar constructor y métodos para usar `archivoProyectoActivo` si no es null, sino `archivoSeleccionTemporal`.
   - `nuevoProyecto()`: `clavesMarcadasEnMemoria.clear(); archivoProyectoActivo = null; guardarAArchivo(archivoSeleccionTemporal, ...);` Actualizar título de ventana.
   - `guardarProyectoComo(Path destino)`: `guardarAArchivo(destino, clavesMarcadasEnMemoria); archivoProyectoActivo = destino;` Actualizar título.
   - `abrirProyecto(Path origen)`: `cargarDesdeArchivo(origen); archivoProyectoActivo = origen;` Actualizar título.
   - `hayCambiosSinGuardar()`: Compara `clavesMarcadasEnMemoria` con el contenido de `archivoProyectoActivo` (si existe).

2. AppActionCommands:
   - `CMD_PROYECTO_NUEVO`, `CMD_PROYECTO_ABRIR`, `CMD_PROYECTO_GUARDAR_COMO`, `CMD_PROYECTO_GUARDAR` (si el proyecto activo tiene nombre).

3. Nuevas Actions: `NuevoProyectoAction`, `AbrirProyectoAction`, `GuardarProyectoComoAction`, `GuardarProyectoAction`.

4. VisorController:
   - Métodos para manejar estas nuevas acciones, usando `JFileChooser` para guardar/abrir.
   - Lógica para "Guardar" (si `archivoProyectoActivo` no es null, guarda ahí; sino, actúa como "Guardar Como").
   - Modificar `ShutdownHook`: Si `projectManager.hayCambiosSinGuardar()`, preguntar al usuario si desea guardar antes de salir. Si guarda, y es temporal, preguntar si quiere darle nombre. Si no guarda y es temporal, se podría borrar `archivoSeleccionTemporal`.
   - Actualizar título de la `JFrame` (`VisorView`) para incluir el nombre del proyecto activo o "(Temporal)".

5. UIDefinitionService:
   - Nuevo Menú "Proyecto" con ítems para Nuevo, Abrir, Guardar, Guardar Como.

============================
ITERACIÓN 3: VISTA INTEGRADA DE SELECCIÓN DE PROYECTO (Toggle de ListModel)
============================

1. AppActionCommands:
   - `CMD_PROYECTO_TOGGLE_VISTA_SELECCION = "cmd.proyecto.toggle_vista_seleccion";`

2. Nueva Action: `ToggleVistaSeleccionProyectoAction extends BaseVisorAction`.
   - `actionPerformed` llama a `controller.toggleVistaSeleccionProyecto();`.
   - Mantiene `Action.SELECTED_KEY` para el estado del toggle.

3. VisorModel:
   - `private boolean mostrandoSeleccionProyecto = false;`
   - `private DefaultListModel<String> modeloListaCarpetaOriginal;`
   - `private String claveSeleccionadaEnCarpetaOriginal;`

4. VisorController:
   - `toggleVistaSeleccionProyecto()`:
       - Invierte `model.mostrandoSeleccionProyecto`.
       - Actualiza `Action.SELECTED_KEY` de `ToggleVistaSeleccionProyectoAction`.
       - Llama a `actualizarAspectoBotonToggle(...)` para el botón de la toolbar.
       - Llama a `refrescarVistaPrincipalSegunModo();` (nuevo método).
   - `refrescarVistaPrincipalSegunModo()`:
       - Si `model.mostrandoSeleccionProyecto`:
           - Guarda `model.getModeloLista()` en `model.modeloListaCarpetaOriginal`.
           - Guarda `model.getSelectedImageKey()` en `model.claveSeleccionadaEnCarpetaOriginal`.
           - Obtiene `projectManager.getClavesMarcadas()`.
           - Crea `nuevoModeloSeleccion` a partir de esas claves.
           - Llama a `model.setModeloLista(nuevoModeloSeleccion);` (¡OJO! Este método debe ser cuidadoso para no limpiar `selectedImageKey` si la clave anterior está en el nuevo modelo).
           - Llama a `view.setListaImagenesModel(nuevoModeloSeleccion);` (o que `cargarListaImagenes` lo haga).
           - Llama a `cargarListaImagenes(primeraClaveDeSeleccionSiExiste)`.
           - Cambia título del panel izquierdo: "Selección: [Nombre Proyecto]".
       - Else (volviendo a vista de carpeta):
           - Llama a `model.setModeloLista(model.modeloListaCarpetaOriginal);`.
           - Llama a `view.setListaImagenesModel(...)`.
           - Llama a `cargarListaImagenes(model.claveSeleccionadaEnCarpetaOriginal)`.
           - Cambia título del panel izquierdo: "Lista de Archivos".

5. UIDefinitionService:
   - Botón en Toolbar para `CMD_PROYECTO_TOGGLE_VISTA_SELECCION`.
   - Ítem de Menú (quizás `JCheckBoxMenuItem`) en "Vista" para `CMD_PROYECTO_TOGGLE_VISTA_SELECCION`.

============================
CONSIDERACIONES ADICIONALES (Futuras):
============================
- **Modo Grid y Marcar:** Deshabilitar `ToggleMarkImageAction` general. Añadir menú contextual en el grid.
- **Rendimiento:** Si `getClavesMarcadas()` es muy grande y se llama frecuentemente para la UI, optimizar.
- **Multi-selección para Marcar/Desmarcar:** En `listaNombres` o Grid.
- **Internacionalización (i18n)** de todos los textos.
- **Deshacer/Rehacer** para marcado/desmarcado.


-------------------------------------------------------------------------
--- FIN DEL PLAN DE IMPLEMENTACIÓN SELECCIÓN DE PROYECTO ---
-------------------------------------------------------------------------


======================================================================================
 INFORME DE PROYECTO: IMPLEMENTACIÓN DE BARRAS DE HERRAMIENTAS DINÁMICAS Y FLOTANTES
======================================================================================

OBJETIVO PRINCIPAL:
Refactorizar el sistema de barras de herramientas para que sean flotantes, acoplables,
y su visibilidad y orden se gestionen dinámicamente según el modo de trabajo actual
(VISUALIZADOR, PROYECTO, etc.). Esto mejorará la usabilidad y la organización del código.

FUNCIONALIDADES CLAVE A IMPLEMENTAR:
1.  **Barras Flotantes y Acoplables:** El usuario podrá arrastrar una barra de herramientas fuera de su
    posición para que flote en su propia ventana.
2.  **Reacoplamiento Inteligente:** Al cerrar una barra de herramientas flotante, esta deberá
    volver a su posición original ordenada, no al final del contenedor.
3.  **Visibilidad por Modo:** La interfaz mostrará únicamente las barras de herramientas relevantes
    para el modo de trabajo activo (ej. la barra de "Edición" solo será visible en el modo "Visualizador").
4.  **Configuración Centralizada:** Toda la definición de la estructura de las barras (su orden,
    botones, y en qué modos son visibles) residirá en un único lugar (`UIDefinitionService`).
5.  **Orden Personalizable (Futuro):** La arquitectura sentará las bases para que en el futuro
    el usuario pueda personalizar el orden de las barras a través del "MegaConfig".

======================================================================================
PLAN DE IMPLEMENTACIÓN DETALLADO
======================================================================================

FASE 1: ENRIQUECER LA DEFINICIÓN DE LA UI (`UIDefinitionService`)

1.  **`modelo/VisorModel.java`:**
    *   Asegurar que el `enum WorkMode { VISUALIZADOR, PROYECTO, DATOS }` existe.

2.  **`vista/config/ToolbarDefinition.java`:**
    *   Modificar (o crear) este `record` para que contenga, además de sus campos actuales,
        dos nuevas propiedades:
        - `int orden`: Un número para la posición relativa (ej: 10, 20, 30...).
        - `Set<WorkMode> modosVisibles`: Un conjunto de los modos en los que la barra debe ser visible.

3.  **`vista/config/UIDefinitionService.java`:**
    *   Modificar el método `generateModularToolbarStructure()`:
        - Para cada `ToolbarDefinition` creada, rellenar los nuevos campos `orden` y `modosVisibles`.
        - Ejemplo: `new ToolbarDefinition("edicion", ..., 20, Set.of(WorkMode.VISUALIZADOR))`


FASE 2: REFACTORIZAR EL GESTOR DE BARRAS DE HERRAMIENTAS (`ToolbarManager`)

1.  **`controlador/managers/ToolbarManager.java`:**
    *   **Añadir un campo para almacenar las instancias creadas:**
        - `private List<JToolBar> toolbarsCreadas = new ArrayList<>();`
    *   **Modificar `inicializarBarrasDeHerramientas()`:**
        - Este método ya no añadirá las barras a la vista directamente.
        - Su nueva responsabilidad será:
            a. Obtener la lista de `ToolbarDefinition` de `UIDefinitionService`.
            b. Iterar sobre las definiciones y, para cada una, usar `ToolbarBuilder` para crear la instancia de `JToolBar`.
            c. Añadir cada `JToolBar` recién creada a la lista interna `toolbarsCreadas`.
            d. **Añadir un `HierarchyListener` a cada `JToolBar` creada.** Este listener será el "disparador" para el reacoplamiento.
    *   **Crear el método de reconstrucción `reconstruirContenedorDeToolbars(WorkMode modoActual)`:**
        - Este será el nuevo método central para dibujar las barras.
        - **Lógica:**
            a. Obtener el `JPanel` contenedor de las barras (`container.toolbars`) desde el `ComponentRegistry`.
            b. Limpiar el contenedor: `toolbarContainer.removeAll()`.
            c. Obtener la lista completa de `ToolbarDefinition` desde `UIDefinitionService`.
            d. Ordenar esta lista de definiciones según el campo `orden`.
            e. Iterar sobre la lista de definiciones **ordenada**.
            f. Para cada definición, comprobar si `def.modosVisibles().contains(modoActual)`.
            g. Si la condición anterior es cierta, buscar la instancia de `JToolBar` correspondiente en `toolbarsCreadas` (usando la `claveBarra`).
            h. Si la `JToolBar` se encuentra y no está flotando (su ancestro es el `JFrame` principal), añadirla al `toolbarContainer`: `toolbarContainer.add(toolbar)`.
            i. Al final del bucle, llamar a `toolbarContainer.revalidate()` y `toolbarContainer.repaint()`.
    *   **Implementar el `HierarchyListener`:**
        - Se añadirá a cada `JToolBar` durante su creación.
        - El método `hierarchyChanged` del listener será muy simple:
            - Comprobará si el cambio es de tipo `PARENT_CHANGED`.
            - Si lo es, llamará a `SwingUtilities.invokeLater(() -> reconstruirContenedorDeToolbars(model.getCurrentWorkMode()));`. Se usa `invokeLater` para asegurar que la reconstrucción ocurra después de que Swing haya procesado el cambio de jerarquía.

FASE 3: ORQUESTACIÓN DESDE EL CONTROLADOR GENERAL (`GeneralController`)

1.  **`controlador/GeneralController.java`:**
    *   **Añadir dependencia:** Necesitará una referencia al `ToolbarManager`. Se inyectará desde `AppInitializer`.
        - `private ToolbarManager toolbarManager;`
        - `public void setToolbarManager(ToolbarManager manager) { ... }`
    *   **Modificar `entrarModo(WorkMode modoAlQueSeEntra)`:**
        - Después de que el modo en `VisorModel` se haya actualizado, este método llamará al `ToolbarManager` para que redibuje las barras de herramientas según el nuevo modo.
        - Llamada: `this.toolbarManager.reconstruirContenedorDeToolbars(modoAlQueSeEntra);`

FASE 4: AJUSTES EN EL ARRANQUE (`AppInitializer`)

1.  **`controlador/AppInitializer.java`:**
    *   **Cableado:** Asegurarse de inyectar el `ToolbarManager` en el `GeneralController`.
    *   **Llamada Inicial:** En el `BLOQUE 3`, después de que `toolbarManager.inicializarBarrasDeHerramientas()` se haya ejecutado, se debe hacer una llamada inicial a la reconstrucción para el modo por defecto (VISUALIZADOR).
        - `toolbarManager.reconstruirContenedorDeToolbars(model.getCurrentWorkMode());`

======================================================================================
FIN DE LA IMPLEMENTACIÓN DE BARRAS DE HERRAMIENTAS DINÁMICAS Y FLOTANTES
======================================================================================


Los Prefijos Más Comunes y Útiles

feat (Feature / Característica)
Cuándo usarlo: Cuando añades una nueva funcionalidad visible para el usuario o una nueva característica a la arquitectura.
Ejemplo: feat: Add project management mode
Tu caso: feat: Implement GeneralController for mode management (Lo que hicimos es una nueva característica arquitectónica).

fix (Fix / Arreglo)
Cuándo usarlo: Cuando corriges un error (un bug) en el código.
Ejemplo: fix: Prevent NullPointerException when creating thumbnails
Tu caso: fix: UI controls not disabled on mode switch (También sería válido, ya que arreglamos un bug visual).

refactor (Refactorización)
Cuándo usarlo: Cuando cambias la estructura del código sin cambiar su comportamiento externo. Es una mejora interna.
Ejemplo: refactor: Extract UI update logic into ViewManager
Tu caso: refactor: Move mode switching logic to GeneralController (Muy apropiado para lo que hicimos).

docs (Documentation / Documentación)
Cuándo usarlo: Cuando solo haces cambios en la documentación (comentarios en el código, archivos README, etc.).
Ejemplo: docs: Update README with installation instructions
style (Estilo)

Cuándo usarlo: Cambios que no afectan el significado del código (espacios en blanco, formato, puntos y comas faltantes, etc.). Suelen ser cambios que haría un formateador de código automático.
Ejemplo: style: Apply code formatter to all Java files
test (Pruebas)
Cuándo usarlo: Cuando añades pruebas que faltaban o corriges pruebas existentes. No cambia el código de producción.
Ejemplo: test: Add unit tests for ThumbnailService

chore (Tarea / Mantenimiento)
Cuándo usarlo: Para cambios en el proceso de construcción, tareas de mantenimiento, o actualización de dependencias que no afectan al código de producción. Es la "limpieza de la casa".
Ejemplo: chore: Update gitignore to exclude log files o chore: Upgrade Swing version
